@using Client.Models
@inject IJSRuntime JSRuntime

<div class="modal fade" id="confirmDeleteModal" tabindex="-1" role="dialog" aria-labelledby="confirmDeleteModal" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                @if (Task is not null)
                {
                    <div class="form-group">
                        <label for="title">Are you sure you want to delete this task?</label>
                        <br /><br />
                        <h3>@Task.Title</h3>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-danger btn-simple" aria-label="Close" @onclick="CloseModal">Cancel</button>
                @if (Task is not null)
                {
                    <button class="btn btn-danger" @onclick="@(() => DeleteClick(Task.Id))">
                        Delete
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public TaskItem Task { get; set; }
    [Parameter] public EventCallback<int> OnDeleteClick { get; set; }
    [Parameter] public EventCallback AfterDelete { get; set; }


    private async Task DeleteClick(int taskId)
    {
        try
        {
            await OnDeleteClick.InvokeAsync(taskId);
            await AfterDelete.InvokeAsync();
            await CloseModal();
        }
        catch (Exception ex)
        {
            // Handle exceptions or display error messages as needed
            Console.WriteLine("Error deleting task: " + ex.Message);
            ShowError("Could not delete task");
        }
    }

    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("closeModal", "confirmDeleteModal");
    }

    private async Task ShowError(string errorText)
        => await JSRuntime.InvokeVoidAsync("showError", errorText);
}
